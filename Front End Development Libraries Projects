//It's time to put your front end development libraries skills to the test. 
//Use Bootstrap, jQuery, Sass, React, and Redux to build 5 projects that will test everything you've learned up to this point.

//Complete all 5 projects, and you'll earn the Front End Development Libraries certification.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

///////////////////////////////////////////////Build a Random Quote Machine
//Objective: Build an app that is functionally similar to this: (https://codepen.io/freeCodeCamp/full/qRZeGZ). 

//Fulfill the below user stories and get all of the tests to pass. 
//Use whichever libraries or APIs you need. 
//Give it your own personal style.

//You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. 
//You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. 
//Additional technologies not listed above are not recommended and using them is at your own risk. 
//We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. 
//We will accept and try to fix all issue reports that use the suggested technology stack for this project. 
//Happy coding!

//    User Story #1: I can see a wrapper element with a corresponding 'id="quote-box"'.

//    User Story #2: Within '#quote-box', I can see an element with a corresponding 'id="text"'.

//    User Story #3: Within '#quote-box', I can see an element with a corresponding 'id="author"'.

//    User Story #4: Within '#quote-box', I can see a clickable element with a corresponding 'id="new-quote"'.

//    User Story #5: Within '#quote-box', I can see a clickable a element with a corresponding 'id="tweet-quote"'.

//    User Story #6: On first load, my quote machine displays a random quote in the element with 'id="text"'.

//    User Story #7: On first load, my quote machine displays the random quote's author in the element with 'id="author"'.

//    User Story #8: When the '#new-quote' button is clicked, my quote machine should fetch a new quote and display it in the '#text' element.

//    User Story #9: My quote machine should fetch the new quote's author when the '#new-quote' button is clicked and display it in the '#author' element.

//    User Story #10: I can tweet the current quote by clicking on the '#tweet-quote' 'a' element. 
//    This a element should include the '"twitter.com/intent/tweet"' path in its 'href' attribute to tweet the current quote.

//    User Story #11: The '#quote-box' wrapper element should be horizontally centered. 
//    Please run tests with browser's zoom level at 100% and page maximized.

//You can build your project by using this CodePen template and clicking 'Save' to create your own pen. 
//Or you can use this CDN link to run the tests in any environment you like: 'https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js'

//Once you're done, submit the URL to your working project with all its tests passing.

//Note: Twitter does not allow links to be loaded in an iframe. 
//Try using the 'target="_blank"' or 'target="_top"' attribute on the '#tweet-quote' element if your tweet won't load. 
//'target="_top"' will replace the current tab so make sure your work is saved.



//First Attempt
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FCC : Random Quote Machine</title>
  <script>
    window.onload = onFirstLoad;
    function onFirstLoad() {
      generateQuote()
    };
    function generateQuote() {
      console.log("Quote Generated");
      document.getElementById("text").innerText = '"One must be more open to opposing views in this world."';
      document.getElementById("author").innerText = "Don Buchla";
    };

  </script>
  <style>
    * { font-size: 2rem; }
  </style>
</head>
<body>
<wrapper id="quote-box">
  <div id="text"></div>
  <div id="author"></div>
  <button id="new-quote" onClick="generateQuote()"  >New Quote</button>
  <a src="#" href="twitter.com/intent/tweet" id="tweet-quote">Tweet Quote</a>
</wrapper>
  <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
</body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//Second Attempt
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <meta name="twitter:image" content="https://shots.codepen.io/freeCodeCamp/pen/qRZeGZ-800.jpg?version=1604690335">
  <title>FCC : Random Quote Machine</title>
  <script>
  const QUOTEBANK = [{
    quote: '\"One must be more open to opposing views in this world.\"',
    author: "Don Buchla"
  },
  {
    quote: '\“It would be egotistical of me to say my ideas were my own. I believe that there is a network of ideas, and the ideas come through me.\”',
    author: "Robert Moog"
  },
  {
    quote: '\"If you want to find the secrets of the universe, think in terms of energy, frequency, and vibration.\"',
    author: "Nikola Tesla"
  },
  {
    quote: '\"Never trust a computer you can\'t throw out a window.\"',
    author: "Steve Wozniak"
  },
  {
    quote: '\"Your visions will become clear only when you can look into your own heart. Who looks outside, dreams; who looks inside, awakes.\"',
    author: "Carl Gustav Jung"
  },
  {
    quote: '\“Music is a moral law. It gives soul to the universe, wings to the mind, flight to the imagination, and charm and gaiety to life and to everything.\"',
    author: "Plato"
  },
  {
    quote: '\“If you love what you do and are willing to do what it takes, it\’s within your reach. And it\’ll be worth every minute you spend alone at night, thinking and thinking about what it is you want to design or build. It\’ll be worth it, I promise.\"',
    author: "Steve Wozniak"
  },
  {
    quote: '\“One good song with a message can bring a point more deeply to more people than a thousand rallies.\"',
    author: "Phil Ochs"
  },
  {
    quote: '\“Be alone, that is the secret of invention; be alone, that is when ideas are born.\"',
    author: "Nikola Tesla"
  },
  {
    quote: '\“I think that electronic technology offers us the possibility of divorcing ourselves from the necessity of virtuosity without divorcing ourselves from the possibility of intense and meaningful interaction with our instruments.\"',
    author: "Don Buchla"
  },
  {
    quote: '\"Everything has some consciousness, and we tap into that.\"',
    author: "Robert Moog"
  },
  {
    quote: '\“Don never liked the word \‘synthesizer\’ because it implies mimicking something else when he wanted to create new sounds and new ways to interact with musical instruments.\"',
    author: "David Buchla"
  },
  {
    quote: '\“It is wrong to expect a reward for your struggles. The reward is the act of struggle itself, not what you win. Even though you can\’t expect to defeat the absurdity of the world, you must make that attempt. That\'s morality, that\'s religion. That\’s art. That\'s life.\"',
    author: "Phil Ochs"
  }];

    window.onload = onFirstLoad;
    function onFirstLoad() {
      generateQuote()
    };
    function generateQuote() {
      let quoteLength =  QUOTEBANK.length;
      let getAQuote = Math.floor(Math.random() * quoteLength);
      document.getElementById("text").innerText = QUOTEBANK[getAQuote].quote;
      document.getElementById("author").innerText = QUOTEBANK[getAQuote].author;
    };

  </script>
  <style>
    * { font-size: 2rem; }
  </style>
</head>
<body>
<wrapper id="quote-box">
  <div id="text"></div>
  <div id="author"></div>
  <button id="new-quote" onClick="generateQuote()"  >New Quote</button>
  <a src="#" href="twitter.com/intent/tweet" id="tweet-quote">Tweet Quote</a>
</wrapper>
  <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
</body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//Third Version Pass all requirements but it is not using React
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <meta name="twitter:image" content="https://shots.codepen.io/freeCodeCamp/pen/qRZeGZ-800.jpg?version=1604690335">
  <title>FCC : Random Quote Machine</title>
  <script>
  const QUOTEBANK = [{
    quote: '\"One must be more open to opposing views in this world.\"',
    author: "- Don Buchla"
  },
  {
    quote: '\“It would be egotistical of me to say my ideas were my own. I believe that there is a network of ideas, and the ideas come through me.\”',
    author: "- Robert Moog"
  },
  {
    quote: '\"If you want to find the secrets of the universe, think in terms of energy, frequency, and vibration.\"',
    author: "- Nikola Tesla"
  },
  {
    quote: '\"Never trust a computer you can\'t throw out a window.\"',
    author: "- Steve Wozniak"
  },
  {
    quote: '\"Your visions will become clear only when you can look into your own heart. Who looks outside, dreams; who looks inside, awakes.\"',
    author: "- Carl Gustav Jung"
  },
  {
    quote: '\“Music is a moral law. It gives soul to the universe, wings to the mind, flight to the imagination, and charm and gaiety to life and to everything.\"',
    author: "- Plato"
  },
  {
    quote: '\“If you love what you do and are willing to do what it takes, it\’s within your reach. And it\’ll be worth every minute you spend alone at night, thinking and thinking about what it is you want to design or build. It\’ll be worth it, I promise.\"',
    author: "- Steve Wozniak"
  },
  {
    quote: '\“One good song with a message can bring a point more deeply to more people than a thousand rallies.\"',
    author: "- Phil Ochs"
  },
  {
    quote: '\“Be alone, that is the secret of invention; be alone, that is when ideas are born.\"',
    author: "- Nikola Tesla"
  },
  {
    quote: '\“I think that electronic technology offers us the possibility of divorcing ourselves from the necessity of virtuosity without divorcing ourselves from the possibility of intense and meaningful interaction with our instruments.\"',
    author: "- Don Buchla"
  },
  {
    quote: '\"Everything has some consciousness, and we tap into that.\"',
    author: "- Robert Moog"
  },
  {
    quote: '\“Don never liked the word \‘synthesizer\’ because it implies mimicking something else when he wanted to create new sounds and new ways to interact with musical instruments.\"',
    author: "- David Buchla"
  },
  {
    quote: '\“It is wrong to expect a reward for your struggles. The reward is the act of struggle itself, not what you win. Even though you can\’t expect to defeat the absurdity of the world, you must make that attempt. That\'s morality, that\'s religion. That\’s art. That\'s life.\"',
    author: "- Phil Ochs"
  }];

    window.onload = onFirstLoad;
    function onFirstLoad() {
      generateQuote()
    };
    function generateQuote() {
      let quoteLength =  QUOTEBANK.length;
      let getAQuote = Math.floor(Math.random() * quoteLength);
      document.getElementById("text").innerText = QUOTEBANK[getAQuote].quote;
      document.getElementById("author").innerText = QUOTEBANK[getAQuote].author;
    };

  </script>
  <style>
    * { font-size: 1rem; }
    wrapper {
      background-color: #282c34;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-size: calc(10px + 2vmin);
      color: white;
      }
  </style>
</head>
<body>

  <wrapper id="quote-box">
    <div id="text"></div>
    <div id="author"></div>
    <button id="new-quote" onClick="generateQuote()"  >New Quote</button>
    <div></div>
    <a src="#" href="twitter.com/intent/tweet" id="tweet-quote">Tweet Quote</a>
  </wrapper>
  <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>

</body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//Final Solution without React
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <meta name="twitter:image" content="https://shots.codepen.io/freeCodeCamp/pen/qRZeGZ-800.jpg?version=1604690335">
  <title>FCC : Random Quote Machine</title>
  <link rel="stylesheet"  href="https://fonts.googleapis.com/css?family=Open+Sans:400,700,800"/>
  <script src="https://kit.fontawesome.com/a2d014ced7.js" crossorigin="anonymous"></script>
  <script>
  const QUOTEBANK = [{
    quote: '\"One must be more open to opposing views in this world.\"',
    author: "- Don Buchla"
  },
  {
    quote: '\“It would be egotistical of me to say my ideas were my own. I believe that there is a network of ideas, and the ideas come through me.\”',
    author: "- Robert Moog"
  },
  {
    quote: '\"If you want to find the secrets of the universe, think in terms of energy, frequency, and vibration.\"',
    author: "- Nikola Tesla"
  },
  {
    quote: '\"Never trust a computer you can\'t throw out a window.\"',
    author: "- Steve Wozniak"
  },
  {
    quote: '\"Your visions will become clear only when you can look into your own heart. Who looks outside, dreams; who looks inside, awakes.\"',
    author: "- Carl Gustav Jung"
  },
  {
    quote: '\“Music is a moral law. It gives soul to the universe, wings to the mind, flight to the imagination, and charm and gaiety to life and to everything.\"',
    author: "- Plato"
  },
  {
    quote: '\“If you love what you do and are willing to do what it takes, it\’s within your reach. And it\’ll be worth every minute you spend alone at night, thinking and thinking about what it is you want to design or build. It\’ll be worth it, I promise.\"',
    author: "- Steve Wozniak"
  },
  {
    quote: '\“One good song with a message can bring a point more deeply to more people than a thousand rallies.\"',
    author: "- Phil Ochs"
  },
  {
    quote: '\“Be alone, that is the secret of invention; be alone, that is when ideas are born.\"',
    author: "- Nikola Tesla"
  },
  {
    quote: '\“I think that electronic technology offers us the possibility of divorcing ourselves from the necessity of virtuosity without divorcing ourselves from the possibility of intense and meaningful interaction with our instruments.\"',
    author: "- Don Buchla"
  },
  {
    quote: '\"Everything has some consciousness, and we tap into that.\"',
    author: "- Robert Moog"
  },
  {
    quote: '\“Don never liked the word \‘synthesizer\’ because it implies mimicking something else when he wanted to create new sounds and new ways to interact with musical instruments.\"',
    author: "- David Buchla"
  },
  {
    quote: '\“It is wrong to expect a reward for your struggles. The reward is the act of struggle itself, not what you win. Even though you can\’t expect to defeat the absurdity of the world, you must make that attempt. That\'s morality, that\'s religion. That\’s art. That\'s life.\"',
    author: "- Phil Ochs"
  }];

    window.onload = onFirstLoad;
    function onFirstLoad() {
      generateQuote()
    };
    function generateQuote() {
      let quoteLength =  QUOTEBANK.length;
      let quoteIndex = Math.floor(Math.random() * quoteLength);
      let getAQuote = QUOTEBANK[quoteIndex];

      let twitterLink = "https://twitter.com/intent/tweet?hashtags=quotes&amp;text=";

      let quotePrep = getAQuote.quote.replace(/\s/g, "%20").replace(/^[\W]/, "%22").replace(/[\W]$/, "%22");
      let authorPrep = getAQuote.author.replace(/\s/g, "%20");
      let quoteAuthorFormat = quotePrep.concat(authorPrep);
      twitterLink = twitterLink.concat(quoteAuthorFormat);

      document.getElementById("tweet-quote").href = twitterLink;
      document.getElementById("text").innerText = getAQuote.quote;
      document.getElementById("author").innerText = getAQuote.author;
    };
  </script>
  <style>
    body {
      background: green;
      animation: bodyMood 15s ease-in-out infinite;
      }
    @keyframes bodyMood {
        25% {
          background-color: orange;
        }
        50% {
          background-color: purple;
        }
        75% {
          background-color: orange;
        }
      }
    #new-quote:hover {
      background-color: lightgray;
      border-radius: 10%;
      }
    wrapper {
      background-color: #282c34;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-size: calc(10px + 2vmin);
      color: white;
      }
    .tweet {
      color: skyblue;
      text-decoration: none;
    }
    .tweet:hover {
      color: lightgray;
    }
  </style>
</head>
<body>

  <wrapper id="quote-box">
    <div id="text"></div>
    <div id="author"></div>
    <button id="new-quote" onClick="generateQuote()"  >New Quote</button>
    <div></div>
    <a class="tweet" target="_blank" href="#" id="tweet-quote">
      <i class="fa fa-twitter" aria-hidden="true">Tweet Quote</i>
    </a>

  </wrapper>
  <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>

</body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//React version was working but something is wrong with it
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
import React, {useState, useEffect} from 'react';
import './App.scss';
const quoteDB = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';

function App() {
const [quote, setQuote] = useState("Never trust a computer you can’t throw out a window");
  const [author, setAuthor] = useState("Steve Wozniak");
  const [QUOTEBANKDB, setQUOTEBANKDB] = useState (null);

  const fetchQuotes = async (url) => {
    const response = await fetch(url)
    const parseJSON = await response.json()
    setQUOTEBANKDB(parseJSON.quotes)
  };

  useEffect(()=> {
    fetchQuotes(quoteDB)
  }, [quoteDB])

  const generateQuote = () => {
    let quoteLength =  QUOTEBANKDB.length;
    let quoteIndex = Math.floor(Math.random() * quoteLength);
    let getAQuote = QUOTEBANKDB[quoteIndex];

    let twitterLink = "https://twitter.com/intent/tweet?hashtags=quotes&text=";

    let quotePrep = getAQuote.quote.replace(/\s/g, "%20").replace(/^[\W]/, "%22").replace(/[\W]$/, "%22");
    let authorPrep = "- " + (getAQuote.author.replace(/\s/g, "%20"));
    let quoteAuthorFormat = quotePrep.concat(authorPrep);
    twitterLink = twitterLink.concat(quoteAuthorFormat);

    document.getElementById("tweet-quote").href = twitterLink;
    setQuote(getAQuote.quote);
    setAuthor(getAQuote.author);
  };

  return (
    <div className="App">
      <header className="App-header">
        <div id="quote-box">
        <h1>Random Quote Machine</h1>
        <p id="text">"{quote}"</p>
        <p id="author">- {author}</p>
        <button id="new-quote" onClick={() => generateQuote()}>New Quote</button> 
        <br/>  
        <a  target="_top" href=" " id="tweet-quote">
          <i class="fa fa-twitter" aria-hidden="true">Tweet Quote</i>
        </a> 
        </div>
        
        
      </header>
    </div>
  );
}

export default App;


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


@import url('https://fonts.googleapis.com/css?family=Raleway:400,500');
.App {
  text-align: center; 
  #quote-box {
    background-color: white;
    border-radius: 10px;
    border-width: 25%;
    color: black; 
    #author{
    text-align: end;
    }
  }
  .tweet {
    color: skyblue;
    text-decoration: none;
  }
  .tweet:hover {
    color: darkgray;
  }
  .App-header {
    background-color: #282c34;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: calc(10px + 2vmin);
    color: white;
    animation: bodyMood 9s ease-in-out infinite;
  }
  #new-quote:hover {
    background-color: darkgray;
    border-radius: 10%;
  }
  
  @keyframes bodyMood {
    25% {
      background-color: orange;
    }
    50% {
      background-color: purple;
    }
    75% {
      background-color: orange;
    }
  }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <meta name="twitter:image" content="https://shots.codepen.io/freeCodeCamp/pen/qRZeGZ-800.jpg?version=1604690335">
    <title>FCC : Random Quote Machine</title>
    <link rel="stylesheet"  href="https://fonts.googleapis.com/css?family=Open+Sans:400,700,800"/>
    <script src="https://kit.fontawesome.com/a2d014ced7.js" crossorigin="anonymous"></script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id='root'>
  
    </div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
  </body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////////////////////////Build a Markdown Previewer
//Objective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/GrZVVO.

//Fulfill the below user stories and get all of the tests to pass. 
//Use whichever libraries or APIs you need. 
//Give it your own personal style.

//You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, 
//    and jQuery to complete this project. You should use a frontend framework 
//    (like React for example) because this section is about learning frontend frameworks. 
//Additional technologies not listed above are not recommended and using them is at your own risk. 
//We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. 
//We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!

//    User Story #1: I can see a 'textarea' element with a corresponding 'id="editor"'.

//    User Story #2: I can see an element with a corresponding 'id="preview"'.

//    User Story #3: When I enter text into the '#editor' element, the '#preview' element is updated as I type to display the content of the textarea.

//    User Story #4: When I enter GitHub flavored markdown into the '#editor' element, 
//    the text is rendered as HTML in the '#preview' element as I type 
//    (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: https://cdnjs.com/libraries/marked).

//    User Story #5: When my markdown previewer first loads, the default text in the '#editor' field should 
//    contain valid markdown that represents at least one of each of the following elements: a heading element (H1 size), 
//    a sub heading element (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.

//    User Story #6: When my markdown previewer first loads, the default markdown in the '#editor' field should be rendered as 
//    HTML in the '#preview' element.

//Optional Bonus (you do not need to make this test pass): 
//    My markdown previewer interprets carriage returns and renders them as 'br' (line break) elements.

//You can build your project by using this CodePen template and clicking 'Save' to create your own pen. 
//Or you can use this CDN link to run the tests in any environment you like: 'https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js'

//Once you're done, submit the URL to your working project with all its tests passing.

//First Attempt using Bootstrap, SASS and jQuery
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <!--The following link is to set the 'root' page's style-->
    <link rel="stylesheet" type="text/css" href="./index.css" />
    <!--<link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    The following meta tag is a bootstrap responsive styling-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--<link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    The following link is a React utility
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />-->
    <title>Markdown Previewer</title>
    <!--The following link is to access the most recent bootstrap css library-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
    <link rel="stylesheet"  href="https://fonts.googleapis.com/css?family=Open+Sans:400,700,800"/>
    <!--The following script is for accessing the free fontawesome icon library-->
    <script src="https://kit.fontawesome.com/a2d014ced7.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.18/marked.min.js"></script>

  </head>
  <body>
    <div class="container-fluid" id="app">
      <div class="row bg-black">
        <h1 class="text-white text-center">Markdown Previewer</h1>
      </div>
      <div class="row">
        <div class="col-xs-6">
        <div class="editorWrapper well bg-primary">
          <div class="toolbar text-center text-white bg-primary"><i></i>Editor<i></i></div>
          <textarea id="editor"></textarea>
        </div>
        <div class="col-xs-6">
      </div>
      <div></div>
      <div class="row">
        <div class="col-xs-6">
        <div class="previewWrapper well bg-success">
          <div class="toolbar text-center text-white bg-success"><i></i>Previewer<i></i></div>
          <div id="preview"></div>
        </div>
        <div class="col-xs-6">
      </div>
    </div>
    <!--The following links are to access the most recent bootstrap js functionality libraries-->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
    <!--The following link is to access the freecodecamp application testing plugin-->
    <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
    <script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
  </body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////CSS
@import url('https://fonts.googleapis.com/css?family=Russo+One');
$darkAccent: #224b4b;
$lightAccent: #2cda9d;
$backgroundBase: #619e9e;

$shadow: 1px 1px 10px 2px darken($backgroundBase, 20%);
$default-border: 1px solid darken($backgroundBase, 35%);

@mixin box-shadow($x, $y, $blur, $c){
     -webkit-box-shadow: $x $y $blur $c;
     -moz-box-shadow: $x $y $blur $c;
      -ms-box-shadow: $x $y $blur $c;
      box-shadow: $x $y $blur $c;
}

* {
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  background-color: hsla(50, 33%, 25%, .75);
  color: #282c34;
  text-align: left;
  background: lighten($backgroundBase, 12%);
  margin: 10px 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.editorWrapper {
  max-width: 600px;
  margin: 1.125rem auto;
}
.toolbar {
  width: 99%;
}
textarea {
    @extend .colorScheme;
    width: 99%;
    min-height: 200px;
    margin-bottom: -5px;
    resize: vertical;
    outline: none;
    padding-left: 5px;
    padding-top: 5px;
    font-size: 0.875rem;
}

.converter {
  width: 100px;
  text-align: center;
  font-size: 35px;
  margin: auto;
}

.previewWrapper {
  @extend .colorScheme;
  max-width: 800px;
  margin: 1.25rem auto;
  min-height: 200px;
  overflow-wrap: break-word;
  border-color: black;
}

@media screen and (max-width: 850px) {
  .previewWrapper {
    max-width: 630px;
  }
  .editorWrapper {
    max-width: 550px;
  }
}
///////////////////////////////Final Solution
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///HTML
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
<script src="./js/marked.js"></script>

<div class="container-fluid" id="app">
  
</div>
<script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///SCSS
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
body {
  background-color: #0984e3;
}
.toolbar {
  border-radius: 3px;
  width: auto;
}
#editor {
  width: 100%;
}
#preview {
  background-color: white;
  border-radius: 3px;
  width: 100%;
}
#editor, #preview {
  min-height: 600px;
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///React javascript
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
marked.setOptions({
  breaks: true,
});

class App extends React.Component {
  
  
  state = {
    inputText: `# Welcome to the React Markdown Previewer! This is a "h1" header

## and this is a sub-heading...
There's a [links](https://www.freecodecamp.org),

Inline code, \`<div></div>\`, between 2 backticks.

\`\`\`
// Here is some code block:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`

Make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

 and
> Block Quotes!
And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | -------------
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbered lists too.
1. Use just 1s if you want!
1. And last but not least, let's not forget embedded images:
![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)
`
  };
  handleChange = (event) => {
    this.setState({
      inputText: event.target.value
    });
  };
  
  render() {
    const {inputText} = this.state;
    
    
    
    return(
      <div>
       
        <div className="row">
          <h1 className="text-center text-white">Markdown Previewer</h1>
        </div>
        <div className="row">
          <div className="col-6">
            <div className="wrapEditor">
              <div className="toolbar text-center text-white bg-primary"><i></i>Editor<i></i></div>
              <textarea className="form-control" id="editor" value={inputText} onChange={this.handleChange}></textarea>
            </div>
          </div>
          <div className="col-6">
            <div className="wrapPreview">
              <div className="toolbar text-center text-white bg-success"><i></i>Previewer<i></i></div>
              <div className="form-control" id="preview" dangerouslySetInnerHTML={{__html: marked.parse(inputText)}}/>
            </div>
          </div>
        </div> 
      </div>
    );
  };
};

ReactDOM.render(<App />, document.getElementById("app"));
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////NOTES
In building this I needed to get my head around React and using the various scripting packages like 'marked' and though I relied heavily on other's
approaches to solving this problem and getting my mind out off HTML, for the truth is creating websites or web applications from and HTML framework
is kind of thinking in a straight line. Where as React is more of a modular kind of approach though it has a clear logical flow at times things appear
to flow in different directions, such as creating a child component first and then creating the parent component, which counter intuative. 
But when all is done React building is simpler and that can cause one to make things more complex then they have to be, which can cause one to 
over look simple errors when debugging code.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//////////////////////////////////////////////Build a Drum Machine
//Objective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/MJyNMd.

//Fulfill the below user stories and get all of the tests to pass. 
//Use whichever libraries or APIs you need. 
//Give it your own personal style.

//You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. 
//You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. 
//Additional technologies not listed above are not recommended and using them is at your own risk. 
//We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. 
//We will accept and try to fix all issue reports that use the suggested technology stack for this project. 
//Happy coding!

//User Story #1: I should be able to see an outer container with a corresponding id="drum-machine" that contains all other elements.

//User Story #2: Within #drum-machine I can see an element with a corresponding id="display".

//User Story #3: Within #drum-machine I can see 9 clickable drum pad elements, each with a class name of drum-pad, a unique id that describes the audio clip the drum pad will be set up to trigger, and an inner text that corresponds to one of the following keys on the keyboard: Q, W, E, A, S, D, Z, X, C. The drum pads MUST be in this order.

//User Story #4: Within each .drum-pad, there should be an HTML5 audio element which has a src attribute pointing to an audio clip, a class name of clip, and an id corresponding to the inner text of its parent .drum-pad (e.g. id="Q", id="W", id="E" etc.).

//User Story #5: When I click on a .drum-pad element, the audio clip contained in its child audio element should be triggered.

//User Story #6: When I press the trigger key associated with each .drum-pad, the audio clip contained in its child audio element should be triggered (e.g. pressing the Q key should trigger the drum pad which contains the string Q, pressing the W key should trigger the drum pad which contains the string W, etc.).

//User Story #7: When a .drum-pad is triggered, a string describing the associated audio clip is displayed as the inner text of the #display element (each string must be unique).

//You can build your project by using this CodePen template and clicking Save to create your own pen. 
//Or you can use this CDN link to run the tests in any environment you like: https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js

//Once you're done, submit the URL to your working project with all its tests passing.

//The CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Successful Attempt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///HTML
<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>CodePen - React Redux Drum Machine</title>
  <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css'>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-bootstrap/0.5pre/assets/css/bootstrap.min.css'>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/slider-pro/1.6.0/css/slider-pro.min.css'>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/avalanche-css/1.3.1/avalanche.min.css'>
<link rel='stylesheet' href='https://unpkg.com/@popperjs/core@2/dist/umd/popper.js'><link rel="stylesheet" href="./style.css">

</head>
<body>
<!-- partial:index.partial.html -->
<div id="App">
</div>
<script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
<!-- partial -->
  <script src='https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/redux/4.2.0/redux.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.0/js/bootstrap.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.4.1/redux-thunk.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jsonform/2.2.5/jsonform.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/react-hooks-global-state/2.0.0/index.umd.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/pwacompat/2.0.17/pwacompat.min.js'></script><script type="module" src="./script.js"></script>

</body>
</html>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///SCSS
@import url("https://fonts.googleapis.com/css?family=Russo+One");
* {
  box-sizing: border-box;
}

body {
  background-color: lightblue;
  margin: 0;
}

.toolbar {
  display: flex;
  align-items: relative;
  justify-content: center;
}

#leftSide, #rightSide {
  display: flex;
  background-color: white;
  border-radius: 9px;
}

#leftSide {
  align-items: right;
  justify-content: right;
}

.padContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

#drum-pad {
  width: 100px;
  height: 80px;
  border-radius: 9px;
  display: flex;
  flex-wrap: wrap;
  align-items: relative;
  justify-content: relative;
  margin: 3px;
}

#drum-pad:hover {
  border: 2px solid #37E2D5;
}

#drum-pad.active {
  background-color: #37E2D5;
  opacity: 100;
  transform: scale(0.98);
}

#padBox {
  border: 2px solid black;
  border-radius: 9px;
  display: flex;
  align-items: relative;
  justify-content: relative;
  margin: auto;
  height: auto;
  width: auto;
}

.padDisplay {
  background-color: gohstwhite;
  border-radius: 9px;
  display: flex;
  flex-wrap: wrap;
  padding: 20px;
  height: 300px;
  width: 360px;
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///React Redux
unction _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}import React, { useState, useEffect } from "https://cdn.skypack.dev/react@17.0.1";

const toneBank = [
  {keyboarCode: 81,
   key: "Q",
   id: "Chord-1",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3" },
  {keyboarCode: 87,
   key: "W",
   id: "Chord-2",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3" },
  {keyboarCode: 69,
   key: "E",
   id: "Chord-3",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3" },
  {keyboarCode: 65,
   key: "A",
   id: "Shaker",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3" },
  {keyboarCode: 83,
   key: "S",
   id: "Open-HH",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3" },
  {keyboarCode: 68,
   key: "D",
   id: "Closed-HH",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3" },
  {keyboarCode: 90,
   key: "Z",
   id: "Punchy-Kick",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3" },
  {keyboarCode: 88,
   key: "X",
   id: "Side-Stick",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3" },
  {keyboarCode: 67,
   key: "C",
   id: "Snare",
   sample:"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3" }
  ];



const keys = ["Q", "W", "E", "A", "S", "D", "Z", "X", "C"];


const Pads = () => /*#__PURE__*/
React.createElement("div", { className: "padDisplay drum-pad", id: "display" },

keys.map((key, idx) => /*#__PURE__*/React.createElement(Pad, { className: "drum-pad", id: toneBank[idx].id, text: toneBank[idx].keyTrigger, code: toneBank[idx].keyCode, audio: toneBank[idx].url })));



class DrumMachine extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {

    return /*#__PURE__*/(
      React.createElement("div", null, /*#__PURE__*/
      React.createElement("div", { id: "drum-machine", className: "container-fluid" }, /*#__PURE__*/
      React.createElement("div", { className: "toolbar", id: "controls" }, /*#__PURE__*/
      React.createElement("div", { className: "col-sm-6", id: "leftSide" }, /*#__PURE__*/
      React.createElement("button", { className: "power", type: "button", className: "btn btn-outline-success shadow" }, "Power")), /*#__PURE__*/

      React.createElement("div", { className: "col-sm-4", id: "centerTitle" }, /*#__PURE__*/
      React.createElement("h1", { className: "text-center" }, "Machine")), /*#__PURE__*/

      React.createElement("div", { className: "col-sm-6", id: "rightSide" }, /*#__PURE__*/
      React.createElement("button", { className: "tones", type: "button", className: "btn btn-outline-primary shadow" }, "Tones"))), /*#__PURE__*/




      React.createElement("div", { className: "padContainer container-fluid" }, /*#__PURE__*/

      React.createElement("div", { id: "padBox" }, /*#__PURE__*/
      React.createElement(Pads, { id: this.id, className: "drum-pad" }))))));

  }}
;

class Pad extends React.Component {
  constructor(props) {
    super(props);_defineProperty(this, "playSound",



    () => {
      console.log(this.audio.current);
      this.audio.current.play();
    });this.audio = React.createRef();}

  render() {
    const { text, audio } = this.props;
    return /*#__PURE__*/(
      React.createElement("div", { className: "pad" }, " ", /*#__PURE__*/React.createElement("button", { id: "drum-pad", type: "button", className: "btn shadow", onClick: this.playSound }, text, " "), /*#__PURE__*/
      React.createElement("audio", { ref: this.audio, src: audio, className: "clip" })));


  }}

ReactDOM.render( /*#__PURE__*/React.createElement(DrumMachine, null), document.getElementById("App"));
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////HTML
<div id="app"></div>
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////SCSS
$padWidth: 100px;
$padHeight: 80px;
$padBorderRadius: 9px;
@import url('https://fonts.googleapis.com/css?family=Russo+One');

*{
  margin: 0;
  box-sizing: border-box;
}

body {
  background-color: lightblue;
  font-size: 24px;
}

h2 {
  font-size: 28px;
}

#drum-machine {
  margin: 10px;
  height: 100vh;
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
}

.controlWrapper {
  width: 50%;
  display: grid;
  padding: 10px;
  grid-gap: 15px;
  margin-top: 10px;
  border-radius: 15px;
  grid-template-columns: repeat( 3, 1fr);
  background-image: linear-gradient( -215deg, #21E1E1 15%, #b9deff 100%);
}

@media(min-width: 690px) {
  .controlWrapper {
    border: 2px solid black;
    border-radius: $padBorderRadius;
    grid-template-columns: repeat( 3, 1fr);
    padding: 8px 10px;
  }
}

.leftSide {
  display: inline;
  padding-top: 100px;
  flex-direction: column;
  margin-left: 50px;
  margin-right: -10px;
  align-items: right;
  justify-content: right;
  padding-right: 100px;
  grid-template-columns: 1fr;
}

.center {
  display: inline;
  margin-left: 500px;
  margin-right: -100px;
  padding-right: 0;
  align-content: relative;
  align-items: relative;
  justify-content: relative;
  flex-direction: column;
  grid-template-columns: 1fr 1fr;
}

.volume {
  flex-direction: column;
  justify-content: rignt;
  align-items: right;
  grid-template-columns: 1fr;
}

input {
  display: flex;
  justify-content: center;
  align-items: center;
  grid-template-columns: 1fr;
}

.rightSide {
  float: right;
  display: inline;
  width: 400px;
  margin-left: 200px;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  align-content: center;
  padding-bottom: 10px;
  padding-right: 0;
  grid-template-columns: 1fr;
}

#kitsBtn {
  grid-template-columns: 1fr;
}

.kitsPads {
  display: inline;
  padding-left: 20px;
  width: 300px;
  text-align: right;
  align-content: center;
  grid-template-columns: 1fr;
}

.control {
  display: inline;
  align-items: center;
  flex-direction: column;
  justify-content: center;
}

.control > button,
.control > input,
.control > h2{
  margin-bottom: 10px
}

.control button{
  border: none;
  color: #ffffff;
  cursor: pointer;
  align-content: center;
  font-size: 20px;
  padding: 8px 10px;
  border-radius: 5px;
  background-color: #000000;
}

@media(min-width: 768px) {
  .wrapper {
    width: 680px;
  }
}

.interface {
  display: grid;
  grid-gap: 6px;
  grid-template-columns: repeat(3, 1fr);
}

#padBox  {
  border: 2px solid black;
  border-radius: 9px;
  background-color: gohstwhite;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 10px;
  height: 270px;
  width: 340px;
}
.drum-pad:hover {
  border: 3px solid #37E2D5;
}
.interface .drum-pad {
  width: $padWidth;
  height: $padHeight;
  outline: none;
  font-size: 24px;
  cursor: pointer;
  border-radius: $padBorderRadius;
  background-colors: #ffffff;
  transition: all .3s ease-in-out;
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////JAVASCRIPT
import * as React from "https://cdn.skypack.dev/react@17.0.1"
import * as ReactDOM from "https://cdn.skypack.dev/react-dom@17.0.1"


const bankOne = [
  {
    keyCode: 81,
    keyTrigger: 'Q',
    id: 'Chord-1',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'
  },
  {
    keyCode: 87,
    keyTrigger: 'W',
    id: 'Chord-2',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'
  },
  {
    keyCode: 69,
    keyTrigger: 'E',
    id: 'Chord-3',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'
  },
  {
    keyCode: 65,
    keyTrigger: 'A',
    id: 'Shaker',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'
  },
  {
    keyCode: 83,
    keyTrigger: 'S',
    id: 'Open-HH',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'
  },
  {
    keyCode: 68,
    keyTrigger: 'D',
    id: 'Closed-HH',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'
  },
  {
    keyCode: 90,
    keyTrigger: 'Z',
    id: 'Punchy-Kick',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'
  },
  {
    keyCode: 88,
    keyTrigger: 'X',
    id: 'Side-Stick',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'
  },
  {
    keyCode: 67,
    keyTrigger: 'C',
    id: 'Snare',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'
  }
];
const bankTwo = [
  {
    keyCode: 81,
    keyTrigger: 'Q',
    id: 'Heater-1',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'
  },
  {
    keyCode: 87,
    keyTrigger: 'W',
    id: 'Heater-2',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'
  },
  {
    keyCode: 69,
    keyTrigger: 'E',
    id: 'Heater-3',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'
  },
  {
    keyCode: 65,
    keyTrigger: 'A',
    id: 'Heater-4',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'
  },
  {
    keyCode: 83,
    keyTrigger: 'S',
    id: 'Clap',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'
  },
  {
    keyCode: 68,
    keyTrigger: 'D',
    id: 'Open-HH',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'
  },
  {
    keyCode: 90,
    keyTrigger: 'Z',
    id: "Kick-n'-Hat",
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'
  },
  {
    keyCode: 88,
    keyTrigger: 'X',
    id: 'Kick',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'
  },
  {
    keyCode: 67,
    keyTrigger: 'C',
    id: 'Closed-HH',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'
  }
];

const kitName = {
  smoothPianoKit: "Smooth Piano Kit",
  heaterKit: "Heater Kit"
}

const sampleBank = {
  smoothPianoKit: bankOne,
  heaterKit: bankTwo
}



const DrumPads = ({ play, sample: { keyTrigger, id, url, keyCode } }) => {
  
  const keydownHandler = (event) => {
    if(event.keyCode === keyCode) {
      play(keyTrigger, id)
    }
  }
  
  React.useEffect(() => {
    document.addEventListener("keydown", keydownHandler)
  }, [])
  return ( 
    <button className="drum-pad btn shadow" type="button" id={id} onClick={() => play(keyTrigger, id)}>
        <audio id={keyTrigger} className="clip" src={url} />
        {keyTrigger}
    </button>
  )
};

const Interface = ({ power, play, samples }) => ( 
  <div className="interface">
    {power ? samples.map((sample)=> <DrumPads play={play} sample={sample} />) : samples.map((sample)=> <DrumPads play={play} sample={{...sample, url:"#"}} />)}
  </div>
);

const MachineControls = ({ stop, power, name, volume, volumeControlHandler, bankSelector }) => (
  <div className="controls">
    <div className="leftSide">
      <button className="control btn btn-outline-success shadow" id="powerBtn" onClick={stop}>{power ? "ON" : "OFF"}</button>
    </div>
    <div className="center">
      <h2 className="volume">Volume: {Math.round(volume * 100)} %</h2>
        <input 
          max="1"
          min="0"
          step="0.01"
          type="range"
          value={volume}
          onChange={volumeControlHandler}
          />
    </div>
    <div className="rightSide">
      <button className="control btn btn-outline-primary shadow" id="kitsBtn" onClick={bankSelector}>Kits</button>
      <h2 className="kitsPads" id="display">{name}</h2>
    </div>
  </div>
)

const DrumMachine = () => {
  const [power, setPower] = React.useState(true);
  const [volume, setVolume] = React.useState(1);
  const [padName, setPadName] = React.useState("");
  const [kit, setKit] = React.useState("smoothPianoKit");
  const [samples, setSamples] = React.useState(sampleBank[kit]);
  
  const stop = () => {
    setPower(!power)
  };
  
  const volumeControlHandler = (event) => {
    setVolume(event.target.value)
  };
  
  const triggeredPadStyle = (audio) => {
    audio.parentElement.style.backgroundColor = "#B1E1FF"
  };
  
  const releaseTriggeredStyle = () => {
    setTimeout(() => {
      audio.parentElement.style.backgroundColor = "#ffffff"
    }, 150)
  };
  
  const play = (key, sample) => {
    setPadName(sample)
    const audio = document.getElementById(key)
    triggeredPadStyle(audio)
    audio.currentTime = 0;
    audio.play()
    releaseTriggeredStyle(audio)
  };
  
  const bankSelector = () => {
    setPadName("")
    if(kit === "smoothPianoKit") {
      setKit("heaterKit")
      setSamples(sampleBank.heaterKit)
    } else {
      setKit("smoothPianoKit")
      setSamples(sampleBank.smoothPianoKit)
    }
  };
  
  const volumeControl = () => {
    const amplitude = samples.map(sample => document.getElementById(sample.keyTrigger))
      amplitude.forEach(audio => {
        if(audio) {
          audio.volume = volume;
        }
      })
  };
  
  
  return (
    <div id="drum-machine">
      {volumeControl()}
      <div className="controlWrapper">
        <MachineControls
          stop={stop}
          power={power}
          volumeControlHandler={volumeControlHandler}
          volume={volume}
          samples={samples}
          name={padName ||  kitName[kit]}
          bankSelector={bankSelector} 
          />
      </div>
      <div id="padBox">
          <Interface 
            stop={stop}
            power={power}
            play={play} 
            samples={samples} />
      </div> 
     </div>
  )
};


ReactDOM.render(<DrumMachine />, document.getElementById("app"));
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////Build a JavaScript Calculator
//Objective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/wgGVVX.

//Fulfill the below user stories and get all of the tests to pass. 
//Use whichever libraries or APIs you need. 
//Give it your own personal style.

//You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. 
//You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. 
//Additional technologies not listed above are not recommended and using them is at your own risk. 
//We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. 
//We will accept and try to fix all issue reports that use the suggested technology stack for this project. 
//Happy coding!

//User Story #1: My calculator should contain a clickable element containing an = (equal sign) with a corresponding id="equals".

//User Story #2: My calculator should contain 10 clickable elements containing one number each from 0-9, 
//  with the following corresponding IDs: 
//  id="zero", id="one", id="two", id="three", id="four", id="five", id="six", id="seven", id="eight", and id="nine".

//User Story #3: My calculator should contain 4 clickable elements each containing one of the 4 primary mathematical operators with 
//  the following corresponding IDs: id="add", id="subtract", id="multiply", id="divide".

//User Story #4: My calculator should contain a clickable element containing a . (decimal point) symbol with a corresponding id="decimal".

//User Story #5: My calculator should contain a clickable element with an id="clear".

//User Story #6: My calculator should contain an element to display values with a corresponding id="display".

//User Story #7: At any time, pressing the clear button clears the input and output values, 
//  and returns the calculator to its initialized state; 0 should be shown in the element with the id of display.

//User Story #8: As I input numbers, I should be able to see my input in the element with the id of display.

//User Story #9: In any order, I should be able to add, subtract, multiply and divide a chain of numbers of any length, 
//  and when I hit =, the correct result should be shown in the element with the id of display.

//User Story #10: When inputting numbers, my calculator should not allow a number to begin with multiple zeros.

//User Story #11: When the decimal element is clicked, a . should append to 
//  the currently displayed value; two . in one number should not be accepted.

//User Story #12: I should be able to perform any operation (+, -, *, /) on numbers containing decimal points.

//User Story #13: If 2 or more operators are entered consecutively, 
//  the operation performed should be the last operator entered (excluding the negative (-) sign). 
//For example, if 5 + * 7 = is entered, the result should be 35 (i.e. 5 * 7); if 5 * - 5 = is entered, the result should be -25 (i.e. 5 * (-5)).

//User Story #14: Pressing an operator immediately following = should start a new calculation that operates on the result of the previous evaluation.

//User Story #15: My calculator should have several decimal places of precision when it comes to 
//  rounding (note that there is no exact standard, 
//  but you should be able to handle calculations like 2 / 7 with reasonable precision to at least 4 decimal places).

//Note On Calculator Logic: It should be noted that there are two main schools of thought on calculator input logic: 
//  immediate execution logic and formula logic. Our example utilizes formula logic and observes order of operation precedence, 
//  immediate execution does not. Either is acceptable, but please note that depending on which you choose, 
//  your calculator may yield different results than ours for certain equations (see below example). 
//As long as your math can be verified by another production calculator, please do not consider this a bug.

//    EXAMPLE: 3 + 5 x 6 - 2 / 4 =

//Immediate Execution Logic: 11.5
//Formula/Expression Logic: 32.5
//You can build your project by using this CodePen template and clicking Save to create your own pen. 
//Or you can use this CDN link to run the tests in any environment you like: https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js

//Once you're done, submit the URL to your working project with all its tests passing.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////
